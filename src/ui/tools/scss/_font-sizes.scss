/// Create font-size modifiers
///
/// @link https://www.smashingmagazine.com/2016/05/fluid-typography/
/// @access public
/// @group tools
/// @param {map} $custom - where custom config will be passed
///
/// @example
///     @include font-sizes();
@mixin font-sizes($custom: ()) {

    //*************************************************************
    // Configuration
    //*************************************************************

    $font-sizes: map-merge((
        'fluid-scaling' : 'modifier',
        'min-vw'        : breakpoint('break-1'),
        'max-vw'        : breakpoint('break-3'),
        'sizes'         : typography-config('sizes')
    ), $custom) !global;

    // Break the font-sizes up into keys and values
    $keys  : map-keys(map-get($font-sizes, 'sizes'));
    $values: map-values(map-get($font-sizes, 'sizes'));

    // Create our modular-scale values for fluid-scaling
    $modular-scale-low-res: 1.067;
    $modular-scale-hi-res : 1.333;

    // Set the values between which sizes should scale
    $min-vw: map-get($font-sizes, 'min-vw');
    $max-vw: map-get($font-sizes, 'max-vw');

    // Get the index of the value closest to our low-res
    // modular-scale value
    $ms-index: 1;
    @each $value in $values {
        @if $value < $modular-scale-low-res {
            $ms-index: index($values, $value);
        }
    }

    // Identify where our scale should start and end
    $scale-start: 1 - $ms-index;
    $scale-end: length($values) + $scale-start - 1;

    // Create the scale to use to create our new values
    $ms-list: ();
    @for $i from $scale-start through $scale-end {
        $ms-list: append($ms-list, $i);
    }

    // Create a set of minimum sizes to use for low resolutions
    $ms-lr-values: ();
    @for $i from 1 through length($ms-list) {
        $new-value: pow($modular-scale-low-res, nth($ms-list, $i));
        $old-value: strip-unit(nth($values, $i));
        // Use the lowest of the two values
        $new-value: min($new-value, $old-value);

        $ms-lr-values: append($ms-lr-values, $new-value);
    }

    // Create a modifier for each font-size
    @each $key, $value in map-get($font-sizes, 'sizes') {
        // Get current index
        $index: index($values, $value);

        // Set min/max value for scaling
        $min-font-size: nth($ms-lr-values, $index) * 1em;
        $max-font-size: $value;

        @include modifier($key) {
            font-size: $value;

            @if map-get($font-sizes, 'fluid-scaling') == true {
                @include fluid-scaling($min-font-size, $max-font-size, $min-vw, $max-vw);
            }

            @if map-get($font-sizes, 'fluid-scaling') == 'modifier' {
                @include modifier('fluid') {
                    @include fluid-scaling($min-font-size, $max-font-size, $min-vw, $max-vw);
                }
            }
        }
    }

}

@mixin fluid-scaling($min-font-size, $max-font-size, $min-vw, $max-vw) {
    @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / (#{strip-unit($max-vw - $min-vw)} / 10)));
    }

    @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
    }
}