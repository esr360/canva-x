@import 'colors.json';
/// Colors
///
/// @access public
/// @group utilities
///
/// @param {map} $custom - where custom config will be passed
/// @outputs all project color palettes as a global variable
@mixin colors($custom: custom('colors')) {
    $colors: config($colors, $custom) !global;
}

//*****************************************************************
// Tools & Utilities
//*****************************************************************

/// Function to get desired color palette
///
/// @access public
/// @group utilities
/// @param {string} $palette - the key of the palette you are interested in
/// @return {map} - new map containing desired palette
@function palette($palette) {
    @return map-get($colors, $palette);
}

/// Function to get desired color from specific palette
///
/// @access public
/// @group utilities
/// @param {map} $palette - the palette which contains your desired color
/// @param {string} $color - the key of the color you are interested in
/// @return {color} - the desired color value
@function color($palette, $color) {
    @return map-get(palette($palette), $color);
}

/// Function to merge entire/partial color palettets
///
/// @access public
/// @group utilities
/// @param {list} $palettes - the palettes you wish to merge
/// @return {map} - new map containing all desired colors and values
@function merge-palettes($palettes) {
    $new-palette: ();

    @each $palette in $palettes {
        // is the value a string? (an entire palette)
        @if type-of($palette) == 'string' {
            $new-palette: map-merge-deep($new-palette, palette($palette));
        }
        // is the value a map?
        @else if type-of($palette) == 'map' {
            // is the map one which contains colors (keys) from an existing paltte?
            @if type-of(nth(nth($palette, 1), 2)) == 'list' {
                $_palette: nth(nth($palette, 1), 1);
                $_colors:  nth(nth($palette, 1), 2);

                $_map: ();

                @each $color in $_colors {
                    $_map: map-set($_map, $color, map-get(palette($_palette), $color));
                    $new-palette: map-merge($new-palette, $_map);
                }
            }
            // is the map one which contains new colors?
            @else if type-of(nth(nth($palette, 1), 2)) == 'color' {
                $new-palette: map-merge($new-palette, $palette);
            }
        }
    }
    @return $new-palette;
}

/// Function to create a linear-gradient
///
/// @access public
/// @group utilities
/// @param {map} $gradient - the desired gradient from the $palettes variable
/// @return {color} - the desired color value
@function gradient($gradient) {

    $gradient: color('gradients', $gradient);
    $direction: map-get($gradient, 'direction');
    $color-stops: map-get($gradient, 'color-stops');

    @each $color-stop in $color-stops {
        $color: nth($color-stop, 1);

        $updated-color-stop: list-replace($color-stop, $color, map-search($colors, $color));

        $color-stops: list-replace($color-stops, $color-stop, $updated-color-stop);
    }

    $color-stops: join($color-stops, (), comma);

    @return linear-gradient($direction, $color-stops);

}