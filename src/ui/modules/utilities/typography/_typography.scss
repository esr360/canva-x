@import 'typography.json';
/// Typography
///
/// @access public
/// @group utilities
///
/// @param {map} $custom - where custom config will be passed
@mixin typography($custom: custom('typography')) {

    //*************************************************************
    // Configuration
    //*************************************************************

    $typography: config($typography, $custom);

    @include module {

        @at-root {

            //*****************************************************
            // Fonts
            //*****************************************************

            @each $typeface, $options in this('typefaces') {
                // Name of desired font family
                $font-family: nth($options, 1);

                // Convert to a value @import can use
                $font-name: str-replace($font-family, ' ', '+');

                // Desired font styles
                $font-styles: list-remove($options, $font-family);

                // Convert to string and remove spaces
                $font-styles: str-replace((inspect($font-styles)), ' ', '');

                // String to be appended to Google Fonts url
                $google-font: $font-name + ':' + $font-styles;

                // import the font from the Google Fonts API
                @if this('import-fonts') {
                    @import url(http://fonts.googleapis.com/css?family=#{$google-font});
                }

                // Get index of typeface
                $index: index(map-keys(this('typefaces')), $typeface);

                .font-#{$index}, .font-#{$typeface} {
                    font-family: $font-family;
                }
            }

            //*****************************************************
            // Styles
            //*****************************************************

            // Links
            a:not([class*='button']) {
                transition: color 0.4s;
                color: this('colors', 'link');
                text-decoration: none;

                p > &, small > & {
                    border-bottom: 1px solid;
                }

                &:hover {
                    color: this('colors', 'link-hover');
                }
            }

        }

    }

} // @mixin typography

//*****************************************************************
// Tools & Utilities
//*****************************************************************

/// Function to get configuration group
///
/// @access public
/// @group utilities
///
/// @param {map} $group - the group you are interested in
///
/// @return {map} - new map containing desired group
@function typography-config($group) {
    @return map-get($typography, $group);
}

/// Function to get desired value from configuration group
///
/// @access public
/// @group utilities
///
/// @param {map} $group - the configuration group you are interested in
/// @param {string} $key - the key of the value you are interested in
///
/// @return {*} - the desired value
@function typography($group, $key) {
    @return eval-config(map-get(typography-config($group), $key));
}

/// Function to get desired typeface value
///
/// @access public
/// @group utilities
///
/// @param {string} $typeface - the desired typeface value
/// @param {string|list} $fallback - the desired fallback typefaces
@function typeface($typeface, $fallback: ('Open Sans', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif)) {
    @return nth(typography('typefaces', $typeface), 1) + ', ' + inspect($fallback);
}

/// Function to get value from 'sizes' group
///
/// @access public
/// @group utilities
///
/// @param {string} $size - the key of the size you are interested in
/// @param {bool} $rem - whether the returned value should use rem units
///
/// @return {number} - the desired font size
@function font-size($size, $rem: false) {
    $size: typography('sizes', $size);
    @if not $rem {
        @return $size;
    }
    @else {
        $size: $size / ($size * 0 + 1);
        @return unquote('#{$size}rem');
    }
}